"var $global = (1, eval)(\"this\");\nvar $isFrozen = Object.isFrozen;\nvar $freeze = Object.freeze;\nvar $create = Object.create;\nvar $isArray = Array.isArray;\nvar $keys = Object.keys;\nvar $getPrototypeOf = Object.getPrototypeOf;\nvar $Error = Error;\nvar $ReferenceError = ReferenceError;\nvar $undef = {_: \"SQUIGGLE_TEMPORAL_DEADZONE_VALUE\"};\nfunction $is(x, y) {\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y;\n    } else {\n        return x !== x && y !== y;\n    }\n}\nfunction $has(obj, key) { return key in obj; }\nfunction $ref(x, name) {\n    if (x === $undef) {\n        throw new $ReferenceError(name + \" used before initialization\");\n    }\n    return x;\n}\nfunction $isObject(x) { return x && typeof x === \"object\"; }\nfunction $slice(xs, i) { return Array.prototype.slice.call(xs, i); }\nfunction $array() { return $freeze($slice(arguments, 0)); }\n// TODO: Allow comparison ops for strings also.\nfunction $lt(a, b) { return $number(a) < $number(b); }\nfunction $gt(a, b) { return $number(a) > $number(b); }\nfunction $lte(a, b) { return $lt(a, b) || $eq(a, b); }\nfunction $gte(a, b) { return $gt(a, b) || $eq(a, b); }\nfunction $neq(a, b) { return !$eq(a, b); }\nfunction $eq(a, b) {\n    if (a === b) {\n        return true;\n    } else if ($isArray(a) && $isArray(b)) {\n        var n = a.length;\n        var m = b.length;\n        if (n !== m) {\n            return false;\n        } else {\n            for (var i = 0; i < n; i++) {\n                if (!$eq(a[i], b[i])) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    } else if ($isObject(a) && $isObject(b)) {\n        // TODO: Remove duplicates.\n        var ks = $keys(a).concat($keys(b)).sort();\n        return ks.every(function(k) {\n            return k in a && k in b && $eq(a[k], b[k]);\n        });\n    } else {\n        return false;\n    }\n}\nfunction $concat(a, b) {\n    if (typeof a === 'string' && typeof b === 'string') {\n        return a + b;\n    }\n    if ($isArray(a) && $isArray(b)) {\n        return a.concat(b);\n    }\n    throw new $Error('incorrect argument types for ++');\n}\nfunction $add(a, b) { return $number(a) + $number(b); }\nfunction $subtract(a, b) { return $number(a) - $number(b); }\nfunction $multiply(a, b) { return $number(a) * $number(b); }\nfunction $divide(a, b) { return $number(a) / $number(b); }\nfunction $not(x) { return !$bool(x); }\nfunction $negate(x) { return -$number(x); }\nfunction $get(obj, k) {\n    if (obj === null || obj === undefined) {\n        throw new $Error('cannot get ' + k + ' of ' + obj);\n    }\n    var v = obj[k];\n    if (v !== undefined) {\n        return v;\n    }\n    throw new $Error('key ' + k + ' is undefined in ' + obj);\n}\n// TODO: Expose this in the language.\nfunction $set(obj, k, v) {\n    if (obj === null || typeof obj !== 'object') {\n        throw new $Error('cannot set ' + k + ' on ' + obj);\n    }\n    if ($isFrozen(obj)) {\n        throw new $Error('cannot set ' + k + ' on frozen object');\n    }\n    obj[k] = v;\n    return obj;\n}\n// TODO: Expose this in the language.\nfunction $type(x) {\n    if (x === null) {\n        return \"null\"\n    }\n    if ($isArray(x)) {\n        return \"array\";\n    }\n    return typeof x;\n}\nfunction $method(obj, method) {\n    return obj[method].bind(obj);\n}\nfunction $update(a, b) {\n    var c = $create($getPrototypeOf(a));\n    $keys(a).forEach(function(k) { c[k] = a[k]; });\n    $keys(b).forEach(function(k) { c[k] = b[k]; });\n    return $freeze(c);\n}\nfunction $object() {\n    if (arguments.length % 2 !== 0) {\n        throw new $Error('objects must have an even number of items');\n    }\n    var obj = {};\n    var i = 0;\n    var n = arguments.length - 1;\n    while (i < n) {\n        if (typeof arguments[i] !== \"string\") {\n            throw new $Error(\"object keys must be strings: \" + arguments[i]);\n        }\n        obj[arguments[i]] = arguments[i + 1];\n        i += 2;\n    }\n    return $freeze(obj);\n}\nfunction $bool(x) {\n    if (typeof x !== 'boolean') {\n        throw new $Error('not a boolean: ' + x);\n    }\n    return x;\n}\nfunction $number(x) {\n    if (typeof x !== 'number') {\n        throw new $Error('not a number: ' + x);\n    }\n    return x;\n}\n"